# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

parameters:
- name: Service1
  type: boolean
  default: true
- name: Service2
  type: boolean
  default: true
    
trigger: 
  - master

pool:
  vmImage: ubuntu-latest

stages:
- stage: PreFlight
  displayName: 'Pre-Flight'
  jobs:
  - job: SecurityScan
    steps:
    - task: CmdLine@2
      displayName: 'SecurityScan'
      inputs:
        script: 'echo Completed Security Scan'
- stage: BuildService1
  dependsOn: PreFlight
  displayName: 'BUILD Service 1'
  jobs:
  - job: Service1
    condition: and(succeeded(), eq('${{ parameters.Service1 }}', 'true'))
    steps:
    - task: CmdLine@2
      displayName: 'Building service 1'
      inputs:
        script: 'echo Building service 1'
- stage: BuildService2
  dependsOn: PreFlight
  displayName: 'BUILD Service 2' 
  jobs:
  - job: Service2
    condition: and(succeeded(), eq('${{ parameters.Service2 }}', 'true'))
    steps:
    - task: CmdLine@2
      displayName: 'Building service 2'
      inputs:
        script: 'echo Building service 2'
- stage: DeployService1
  dependsOn: BuildService1
  displayName: 'DEPLOY Service 1'
  condition: and(succeeded(), eq('${{ parameters.Service1 }}', 'true'))
  jobs:
  - job: DeployService1
    steps:
    - task: CmdLine@2
      displayName: 'DeployingService1'
      inputs:
        script: 'echo DeployedService1'
- stage: DeployService2
  displayName: 'DEPLOY Service 2'
  dependsOn: BuildService2
  condition: and(succeeded(), eq('${{ parameters.Service2 }}', 'true'))
  jobs:
  - job: DeployService2
    steps:
    - task: CmdLine@2
      displayName: 'DeployingService2'
      inputs:
        script: 'echo DeployingService2'
- stage: PostFlight
  displayName: 'PostFlight'
  dependsOn: 
  - DeployService1
  - DeployService2
  jobs:
  - job: FinalChecks
    steps:
    - task: CmdLine@2
      displayName: 'FinalChecks'
      inputs:
        script: 'echo Pipeline completed'
